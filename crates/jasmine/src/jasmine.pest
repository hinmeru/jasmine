DoubleQuoteChar = _{
    "\\" ~ EscapeSequence
  | LineContinuation
  | !"\"" ~ CharLiteral
}

EscapeSequence         = _{
    CharEscapeSequence
  | NulEscapeSequence
  | "x" ~ HexEscapeSequence
  | "u" ~ UnicodeEscapeSequence
}
SingleEscapeChar       = _{ "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v" }
NonEscapeChar          = _{ !SingleEscapeChar ~ ANY }
CharEscapeSequence     = @{ SingleEscapeChar | NonEscapeChar }
NulEscapeSequence      = @{ "0" }
HexEscapeSequence      = @{ ASCII_HEX_DIGIT{2} }
LineContinuation       = @{ "\\" ~ LineTerminatorSequence }
LineTerminator         = _{ "\u{000A}" | "\u{000D}" | "\u{2028}" | "\u{2029}" }
LineTerminatorSequence = _{ "\u{000D}" ~ "\u{000A}" | LineTerminator }
CharLiteral            = @{ !("\\" | "\"" | LineTerminatorSequence) ~ ANY }
UnicodeEscapeSequence  = @{ ASCII_HEX_DIGIT{4} }

String = @{ "\"" ~ DoubleQuoteChar* ~ "\"" }

SingleQuoteChar = _{
    "\\" ~ EscapeSequence
  | LineContinuation
  | !"'" ~ CharLiteral
}

CatChar = _{ ASCII_ALPHANUMERIC | "_" | "." | "/" | "\\" | ":" | CJK }
Cat     = @{ "`" ~ CatChar* }
CatAlt  = @{ "'" ~ SingleQuoteChar* ~ "'" }
Cats    = @{ ("`" ~ CatChar*) ~ ("`" ~ CatChar*)+ }

WHITESPACE = _{ " " | "\t" | NEWLINE }

blockComment = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
lineComment  = _{ "//" ~ (!"\n" ~ ANY)* }
COMMENT      = _{ blockComment | lineComment }

Exp = {
    SqlExp
  | IfExp
  | WhileExp
  | TryExp
  | AssignmentExp
  | UnaryExp
  | BinaryExp
  | Fn
  | FnCall
  | BracketExp
  | Term
}

Statements = { ((ReturnExp | RaiseExp | Exp) ~ ";")* ~ (ReturnExp | RaiseExp | Exp)? }

ConditionExp = _{
    SqlExp
  | AssignmentExp
  | UnaryExp
  | BinaryExp
  | FnCall
  | Term
}

IfExp = { "if" ~ "(" ~ ConditionExp ~ ")" ~ "{" ~ Statements ~ "}" }

WhileExp = { "while" ~ "(" ~ ConditionExp ~ ")" ~ "{" ~ Statements ~ "}" }

TryExp = { "try" ~ "{" ~ Statements ~ "}" ~ "catch" ~ "(" ~ Id ~ ")" ~ "{" ~ Statements ~ "}" }

BracketExp = { "(" ~ Exp ~ ")" }

// BinaryOp for functional query
ListItem = _{ Exp | BinaryOp }
List     =  { "[" ~ (ListItem ~ ",")* ~ ListItem? ~ "]" }

ReturnExp = { "return" ~ Exp }
RaiseExp  = { "raise" ~ Exp }

UnaryOperand = _{
    Dataframe
  | Matrix
  | Dict
  | Series
  | List
  | Fn
  | FnCall
  | GlobalId
  | Id
  | BracketExp
}

UnaryExp = {
    UnaryOperand ~ (SqlExp | AssignmentExp | UnaryExp | BinaryExp | FnCall | Term)
}

BinaryOperand = _{
    Fn
  | FnCall
  | Term
  | BracketExp
}

BinaryExp = { BinaryOperand ~ Binary ~ Exp }

Tuple = { "(" ~ ((GlobalId | Id | Skip) ~ ",")* ~ (GlobalId | Id | Skip) ~ ")" }

AssignmentExp = { (FnCall | GlobalId | Id | Tuple) ~ "=" ~ Exp }

Term = _{
    Dataframe
  | Matrix
  | Dict
  | List
  | Series
  | String
  | Cats
  | CatAlt
  | Cat
  | Boolean
  | Null
  | Timestamp
  | Datetime
  | Duration
  | Date
  | Time
  | Decimal
  | Integer
  | GlobalId
  | Id
}

// functions with 2 parameters
BinaryOp = {
    "!=="
  | "!="
  | "<="
  | ">="
  | ">"
  | "<"
  | "===" // strict equality

  | "==" // equality

  | "!"
  | "@"
  | ".." // range

  | "$"
  | "?"
  | "++" // concat list

  | "+"
  | "-"
  | "**"
  | "*"
  | "/"
  | "%"
  | "|"
  | "&"
  | "#"
  | "^"
}

Binary = _{
    BinaryOp
  | BinaryId
}

BinaryId = @{ "~" ~ (GlobalId | Id) }

// <--SQL
SqlKeyword = {
    "select"
  | "update"
  | "delete"
  | "by"
  | "from"
  | "where"
  | "dyn"
  | "rolling"
  | "sort"
  | "take"
}

SqlOpExp = _{
    BinarySqlExp
  | UnarySqlExp
  | FnCall
  | BracketSqlExp
  | Term
}

UnarySqlExp     =  {
    (GlobalId | Id) ~ (BinarySqlExp | UnarySqlExp | FnCall | Term)
}
BinarySqlExp    =  { BinaryOperand ~ (BinaryOp | BinaryId) ~ SqlOpExp }
BracketSqlExp   =  { "(" ~ SqlOpExp ~ ")" }
SeriesName      = @{ Id }
SeriesNames     = _{ (SeriesName ~ ",")* ~ SeriesName? }
RenameSeriesExp =  { SeriesName ~ "=" ~ (SqlOpExp | BracketSqlExp) }
SeriesExp       =  { RenameSeriesExp | SqlOpExp | BracketSqlExp }
SeriesExps      = _{ (SeriesExp ~ ",")* ~ SeriesExp? }
FromExp         =  { "from" ~ (Dataframe | FnCall | GlobalId | Id | BracketExp | Cat | String) }
GroupExp        =  { ("by" | "dyn" | "rolling") ~ SeriesExps }
FilterExp       =  { "where" ~ (SqlOpExp ~ ",")* ~ SqlOpExp? }
SelectOp        =  { "select" ~ SeriesExps }
UpdateOp        =  { "update" ~ SeriesExps }
DeleteOp        =  { "delete" ~ SeriesNames }
SortName        = @{ "-"? ~ SeriesName }
SortNames       = _{ SortName ~ ("," ~ SortName)* ~ ","? }
SortOp          =  { "sort" ~ SortNames }
TakeOp          =  { "take" ~ Exp }
SqlExp          =  { (SelectOp | UpdateOp | DeleteOp) ~ GroupExp? ~ FromExp ~ FilterExp? ~ SortOp? ~ TakeOp? }

// -->SQL

Dataframe = { "df" ~ "[" ~ SeriesExp ~ ("," ~ SeriesExp)* ~ ","? ~ "]" }

Row    = { "[" ~ (Exp ~ ("," ~ Exp)*)? ~ ","? ~ "]" }
Matrix = { "x[" ~ Row* ~ "]" }

KeyValueExp = { (String | Cat | CatAlt | Id) ~ ":" ~ Exp }
Dict        = {
    ("{" ~ (KeyValueExp ~ ",")* ~ KeyValueExp? ~ "}")
}

Params = { "(" ~ (Id ~ ",")* ~ Id? ~ ")" }
Fn     = { "fn" ~ Params ~ "{" ~ Statements ~ "}" }

Skip   = { "" }
Arg    = { Exp | Skip }
FnCall = { (GlobalId | Fn | BinaryOp | Id | Dict | Dataframe | List | BracketExp) ~ "(" ~ (Arg ~ ",")* ~ Arg ~ ")" }

Date      = @{ ASCII_DIGIT{4} ~ "-" ~ ASCII_DIGIT{2} ~ "-" ~ ASCII_DIGIT{2} }
Time      = @{ ASCII_DIGIT{2} ~ ":" ~ ASCII_DIGIT{2} ~ ":" ~ ASCII_DIGIT{2} ~ ("." ~ ASCII_DIGIT{,9})? }
Datetime  = @{ Date ~ "T" ~ Time? }
Timestamp = @{ Date ~ "D" ~ Time? }
Duration  = @{ (Integer ~ "D" ~ Time?) | (Integer ~ ("ns" | "s" | "m" | "h")) }
Integer   = @{ "-"? ~ DecimalIntegerLiteral+ }

Decimal = @{ "-"? ~ (DecimalLiteral | "inf") }

DecimalIntegerLiteral = _{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
ExponentPart          = _{ ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+ }

DecimalLiteral = _{
    DecimalIntegerLiteral ~ "." ~ ASCII_DIGIT* ~ ExponentPart?
  | "." ~ ASCII_DIGIT+ ~ ExponentPart?
  | DecimalIntegerLiteral ~ ExponentPart
}

Boolean = { ("true" | "false" | "0b" | "1b") }
Null    = { "null" | "0n" }

Series = { Scalar{2, } }

Scalar = @{
    (Datetime | Timestamp | Date | Time | Duration | Boolean | Null | Decimal ~ ("f32" | "f64")? | Integer ~ ("u8" | "u16" | "u32" | "u64" | "i8" | "i16" | "i32" | "i64" | "f32" | "f64" | "ns" | "s" | "m" | "h")?)
}

CJK        =  { HAN | HIRAGANA | KATAKANA | HANGUL | BOPOMOFO }
Identifier = @{ (ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) | (CJK ~ (ASCII_ALPHANUMERIC | CJK | "_")*) }
Id         = @{ (!SqlKeyword ~ Identifier) | (SqlKeyword ~ (ASCII_ALPHANUMERIC | "_")+) }
GlobalId   = @{ Identifier ~ ("." ~ Identifier)+ }

Statement = _{ Exp | "" }
Program   = _{ SOI ~ (Statement ~ ";")* ~ Statement? ~ EOI }
